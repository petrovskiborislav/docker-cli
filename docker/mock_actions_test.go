// Code generated by mockery v2.14.0. DO NOT EDIT.

package docker_test

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockActions is an autogenerated mock type for the Actions type
type mockActions struct {
	mock.Mock
}

// CheckIfImageExists provides a mock function with given fields: ctx, imageName
func (_m *mockActions) CheckIfImageExists(ctx context.Context, imageName string) (bool, error) {
	ret := _m.Called(ctx, imageName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, imageName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainerWithNetwork provides a mock function with given fields: ctx, imageName, containerName, networkID, envs
func (_m *mockActions) CreateContainerWithNetwork(ctx context.Context, imageName string, containerName string, networkID string, envs []string) (string, error) {
	ret := _m.Called(ctx, imageName, containerName, networkID, envs)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) string); ok {
		r0 = rf(ctx, imageName, containerName, networkID, envs)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) error); ok {
		r1 = rf(ctx, imageName, containerName, networkID, envs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetwork provides a mock function with given fields: ctx, networkName
func (_m *mockActions) CreateNetwork(ctx context.Context, networkName string) (string, error) {
	ret := _m.Called(ctx, networkName)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, networkName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, networkName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullImage provides a mock function with given fields: ctx, imageName
func (_m *mockActions) PullImage(ctx context.Context, imageName string) error {
	ret := _m.Called(ctx, imageName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, imageName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveContainer provides a mock function with given fields: ctx, containerID
func (_m *mockActions) RemoveContainer(ctx context.Context, containerID string) error {
	ret := _m.Called(ctx, containerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveNetwork provides a mock function with given fields: ctx, containerName
func (_m *mockActions) RemoveNetwork(ctx context.Context, containerName string) error {
	ret := _m.Called(ctx, containerName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, containerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartContainer provides a mock function with given fields: ctx, containerID
func (_m *mockActions) StartContainer(ctx context.Context, containerID string) error {
	ret := _m.Called(ctx, containerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopContainer provides a mock function with given fields: ctx, imageName
func (_m *mockActions) StopContainer(ctx context.Context, imageName string) (string, error) {
	ret := _m.Called(ctx, imageName)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, imageName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockActions interface {
	mock.TestingT
	Cleanup(func())
}

// newMockActions creates a new instance of mockActions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockActions(t mockConstructorTestingTnewMockActions) *mockActions {
	mock := &mockActions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
